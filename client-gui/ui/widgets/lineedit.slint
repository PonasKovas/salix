// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0
// 
// Modified to change/add styling

import { Palette } from "../palette.slint";

component LineEditBase inherits Rectangle {
    in property <string> placeholder-text;
    in property <length> font-size <=> text-input.font-size;
    in-out property <string> text <=> text-input.text;
    in-out property <brush> placeholder-color;
    in property <bool> enabled <=> text-input.enabled;
    out property <bool> has-focus: text-input.has-focus;
    in property <InputType> input-type <=> text-input.input-type;
    in property <TextHorizontalAlignment> horizontal-alignment <=> text-input.horizontal-alignment;
    in property <bool> read-only <=> text-input.read-only;
    in property <int> font-weight <=> text-input.font-weight;
    in property <brush> text-color;
    in property <color> selection-background-color <=> text-input.selection-background-color;
    in property <color> selection-foreground-color <=> text-input.selection-foreground-color;
    in property <length> margin;

    callback accepted(text: string);
    callback edited(text: string);
    callback key-pressed(event: KeyEvent) -> EventResult;
    callback key-released(event: KeyEvent) -> EventResult;

    public function set-selection-offsets(start: int, end: int) {
        text-input.set-selection-offsets(start, end);
    }

    public function select-all() {
        text-input.select-all();
    }

    public function clear-selection() {
        text-input.clear-selection();
    }

    public function cut() {
        text-input.cut();
    }

    public function copy() {
        text-input.copy();
    }

    public function paste() {
        text-input.paste();
    }

    // on width < 1px or if the `TextInput` is clipped it cannot be focused therefore min-width 1px
    min-width: 1px;
    min-height: text-input.preferred-height;
    clip: true;
    forward-focus: text-input;

    placeholder := Text {
        width: 100%;
        height: 100%;
        vertical-alignment: center;
        text: (root.text == "" && text-input.preedit-text == "") ? root.placeholder-text : "";
        font-size: text-input.font-size;
        font-italic: text-input.font-italic;
        font-weight: text-input.font-weight;
        font-family: text-input.font-family;
        color: root.placeholder-color;
        horizontal-alignment: root.horizontal-alignment;
        // `accessible-placeholder-text` is set on LineEdit already
        accessible-role: none;
    }

    ContextMenuArea {
        enabled: root.enabled;
        Menu {
            MenuItem {
                title: @tr("Cut");
                enabled: !root.read-only && root.enabled;
                activated => {
                    text-input.cut();
                }
            }
            MenuItem {
                title: @tr("Copy");
                enabled: !root.text.is-empty;
                activated => {
                    text-input.copy();
                }
            }
            MenuItem {
                title: @tr("Paste");
                enabled: !root.read-only && root.enabled;
                activated => {
                    text-input.paste();
                }
            }
            MenuItem {
                title: @tr("Select All");
                enabled: !root.text.is-empty;
                activated => {
                    text-input.select-all();
                }
            }
        }


        text-input := TextInput {
            property <length> computed-x;

            x: min(0px, max(parent.width - self.width - self.text-cursor-width, self.computed-x));
            width: max(parent.width - self.text-cursor-width, self.preferred-width);
            height: 100%;
            vertical-alignment: center;
            single-line: true;
            color: root.text-color;
            // Disable TextInput's built-in accessibility support as the widget takes care of that.
            accessible-role: none;

            cursor-position-changed(cursor-position) => {
                if cursor-position.x + self.computed_x < root.margin {
                    self.computed_x = - cursor-position.x + root.margin;
                } else if cursor-position.x + self.computed_x > parent.width - root.margin - self.text-cursor-width {
                    self.computed_x = parent.width - cursor-position.x - root.margin - self.text-cursor-width;
                }
            }

            accepted => {
                root.accepted(self.text);
            }

            edited => {
                root.edited(self.text);
            }

            key-pressed(event) => {
                root.key-pressed(event)
            }

            key-released(event) => {
                root.key-released(event)
            }
        }
    }
}

component LineEditClearIcon inherits Image {
    in-out property <string> text;
    callback clear();

    vertical-alignment: center;
    TouchArea {
        clicked => { root.clear(); }
    }
}

component LineEditPasswordIcon inherits Image {
    callback show-password-changed(bool);
    in property <bool> show-password;
    in property <image> show-password-image;
    in property <image> hide-password-image;

    source: show-password ? hide-password-image : show-password-image;
    vertical-alignment: center;
    TouchArea {
        clicked => {
            root.show-password-changed(!show-password);
        }
    }
}

export component LineEdit {
    in property <bool> enabled <=> base.enabled;
    in property <InputType> input-type;
    in property <TextHorizontalAlignment> horizontal-alignment <=> base.horizontal-alignment;
    in property <bool> read-only <=> base.read-only;
    in property <bool> error: false;
    in property <length> font-size <=> base.font-size;
    in property <string> placeholder-text <=> base.placeholder-text;
    in property <bool> show_clear_icon: true;
    out property <bool> has-focus <=> base.has-focus;
    in-out property <string> text <=> base.text;

    callback accepted <=> base.accepted;
    callback edited <=> base.edited;
    callback key-pressed <=> base.key-pressed;
    callback key-released <=> base.key-released;
    accessible-role: text-input;
    accessible-enabled: root.enabled;
    accessible-value <=> text;
    accessible-placeholder-text: text == "" ? placeholder-text : "";
    accessible-read-only: root.read-only;
    accessible-action-set-value(v) => { text = v; edited(v); }

    public function set-selection-offsets(start: int, end: int) {
        base.set-selection-offsets(start, end);
    }

    public function select-all() {
        base.select-all();
    }

    public function clear-selection() {
        base.clear-selection();
    }

    public function cut() {
        base.cut();
    }

    public function copy() {
        base.copy();
    }

    public function paste() {
        base.paste();
    }

    vertical-stretch: 0;
    horizontal-stretch: 1;
    min-width: max(160px, layout.min-width);
    min-height: max(32px, layout.min-height);
    forward-focus: base;

    states [
        disabled when !root.enabled : {
            background.background: Palette.background2;
            base.placeholder-color: Palette.text2;
        }
        focused when root.has-focus : {
            focus-border.background: error ? Palette.error : Palette.accent;
        }
    ]

    background := Rectangle {
        border-radius: 4px;
        background: Palette.background1;
        border-width: 1px;
        border-color: error ? Palette.error : Palette.background1;

        layout := HorizontalLayout {
            padding-left: 12px;
            padding-right: 12px;

            base := LineEditBase {
                input-type: root.input-type;
                selection-background-color: Palette.accent;
                selection-foreground-color: Palette.text1;
                text-color: Palette.text1;
                placeholder-color: Palette.text2;
                margin: layout.padding-left + layout.padding-right;
                horizontal-stretch: 1;
            }

            if root.show_clear_icon && !root.text.is-empty && root.input-type != InputType.password && root.enabled && !root.read-only && root.has-focus: LineEditClearIcon {
                width: 24px;
                text: base.text;
                source: @image-url("../images/clear.svg");
                colorize: base.text-color;
                clear => {
                    base.text = "";
                    base.focus();
                }
            }

            if root.input-type == InputType.password && !root.text.is-empty && root.has-focus: LineEditPasswordIcon {
                width: 24px;
                show-password-image: @image-url("../images/eye-show.svg");
                hide-password-image: @image-url("../images/eye-hide.svg");
                colorize: base.text-color;
                show-password: base.input-type != InputType.password;
                show-password-changed(show) => {
                    base.input-type = show ? InputType.text : root.input-type;
                    base.focus();
                }
            }
        }

        focus-border := Rectangle {
            x: parent.border-radius;
            y: parent.height - self.height;
            width: parent.width - 2 * parent.border-radius;
            height: 2px;
        }
    }
}

